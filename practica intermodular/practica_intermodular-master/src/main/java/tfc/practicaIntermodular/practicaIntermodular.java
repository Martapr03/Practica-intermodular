/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tfc.practicaIntermodular;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marta Pastor Roncero
 */
public class practicaIntermodular extends javax.swing.JFrame {

    /**
     * Creates new form jFramePrincipal
     */
    public practicaIntermodular() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Estrella = new javax.swing.JLabel();
        TipoEstrella = new javax.swing.JLabel();
        Radio = new javax.swing.JLabel();
        Temperatura = new javax.swing.JLabel();
        Distancia = new javax.swing.JLabel();
        Composicion = new javax.swing.JLabel();
        Titulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla1 = new javax.swing.JTable();
        elegirPlaneta = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla2 = new javax.swing.JTable();
        TipoE = new javax.swing.JLabel();
        TipoRadio = new javax.swing.JLabel();
        TipoTemperatura = new javax.swing.JLabel();
        TipoDistancia = new javax.swing.JLabel();
        TipoComposicion = new javax.swing.JLabel();
        ver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Estrella.setText("Estrella:");

        TipoEstrella.setText("Tipo de estrella:");

        Radio.setText("Radio:");

        Temperatura.setText("Temperatura:");

        Distancia.setText("Distancia:");

        Composicion.setText("Composicion:");

        Titulo.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        Titulo.setText("PRÁCTICA INTERMODULAR -  1ºDAM");

        tabla1.setForeground(new java.awt.Color(0, 0, 0));
        tabla1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Radio(km)", "Temperatura", "Distancia", "Composicion", "P.Orbital", "N.satelites", "Fecha Creacion"
            }
        ));
        jScrollPane1.setViewportView(tabla1);

        elegirPlaneta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Planeta", "Tierra", "Marte", "Venus", "Saturno", "Jupiter", "Urano", "Mercurio", "Neptuno", " " }));
        elegirPlaneta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elegirPlanetaActionPerformed(evt);
            }
        });

        tabla2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Planeta", "Radio", "Distancia", "P. Orbitario", "Temperatura", "Tipo"
            }
        ));
        jScrollPane2.setViewportView(tabla2);

        ver.setText("ver estrella");
        ver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 3, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Estrella, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(TipoEstrella)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(TipoE, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(Temperatura, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(Radio, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(37, 37, 37)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(TipoTemperatura, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                                                .addComponent(TipoRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Distancia, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(Composicion, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(4, 4, 4)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(TipoComposicion, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                                            .addComponent(TipoDistancia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(ver, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(elegirPlaneta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(148, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Estrella)
                    .addComponent(elegirPlaneta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(219, 219, 219))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TipoEstrella)
                            .addComponent(TipoE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Radio)
                            .addComponent(TipoRadio))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Temperatura, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TipoTemperatura))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Distancia)
                            .addComponent(TipoDistancia))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Composicion)
                            .addComponent(TipoComposicion))
                        .addGap(18, 18, 18)
                        .addComponent(ver)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void elegirPlanetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elegirPlanetaActionPerformed
        //Combo box
        if(elegirPlaneta.getSelectedItem().equals("Tierra")){
            conexiondeBDD conexion = new conexiondeBDD();
            String[] tierra = conexion.consultaTierra();
            DefaultTableModel model = (DefaultTableModel) tabla1.getModel();
            model.setRowCount(0);
            model.addRow(new Object[] {tierra[0], tierra[1], tierra[2], tierra[3], tierra[4], tierra[5], tierra[6], tierra[7]});
             
        }else if(elegirPlaneta.getSelectedItem().equals("Venus")){
            conexiondeBDD conexion = new conexiondeBDD();
            String[] Venus = conexion.consultaVenus();
            DefaultTableModel model = (DefaultTableModel) tabla1.getModel();
            model.setRowCount(0);
            model.addRow(new Object[] {Venus[0], Venus[1], Venus[2], Venus[3], Venus[4], Venus[5], Venus[6], Venus[7]});
         
        }else if(elegirPlaneta.getSelectedItem().equals("Mercurio")){
            conexiondeBDD conexion = new conexiondeBDD();
            String[] Mercurio = conexion.consultaMercurio();
            DefaultTableModel model = (DefaultTableModel) tabla1.getModel();
            model.setRowCount(0);
            model.addRow(new Object[] {Mercurio[0], Mercurio[1], Mercurio[2], Mercurio[3], Mercurio[4], Mercurio[5], Mercurio[6], Mercurio[7]});
         
        }else if(elegirPlaneta.getSelectedItem().equals("Marte")){
            conexiondeBDD conexion = new conexiondeBDD();
            String[] Marte = conexion.consultaMarte();
            DefaultTableModel model = (DefaultTableModel) tabla1.getModel();
            model.setRowCount(0);
            model.addRow(new Object[] {Marte[0], Marte[1], Marte[2], Marte[3], Marte[4], Marte[5], Marte[6], Marte[7]});
         
        }else if(elegirPlaneta.getSelectedItem().equals("Jupiter")){
            conexiondeBDD conexion = new conexiondeBDD();
            String[] Júpiter = conexion.consultaJúpiter();
            DefaultTableModel model = (DefaultTableModel) tabla1.getModel();
            model.setRowCount(0);
            model.addRow(new Object[] {Júpiter[0], Júpiter[1], Júpiter[2], Júpiter[3], Júpiter[4], Júpiter[5], Júpiter[6], Júpiter[7]});
         
        }else if(elegirPlaneta.getSelectedItem().equals("Saturno")){
            conexiondeBDD conexion = new conexiondeBDD();
            String[] Saturno = conexion.consultaSaturno();
            DefaultTableModel model = (DefaultTableModel) tabla1.getModel();
            model.setRowCount(0);
            model.addRow(new Object[] {Saturno[0], Saturno[1], Saturno[2], Saturno[3], Saturno[4], Saturno[5], Saturno[6], Saturno[7]});
         
        }else if(elegirPlaneta.getSelectedItem().equals("Urano")){
            conexiondeBDD conexion = new conexiondeBDD();
            String[] Urano = conexion.consultaUrano();
            DefaultTableModel model = (DefaultTableModel) tabla1.getModel();
            model.setRowCount(0);
            model.addRow(new Object[] {Urano[0], Urano[1], Urano[2], Urano[3], Urano[4], Urano[5], Urano[6], Urano[7]});
         
        }else if(elegirPlaneta.getSelectedItem().equals("Neptuno")){
            conexiondeBDD conexion = new conexiondeBDD();
            String[] Neptuno = conexion.consultaNeptuno();
            DefaultTableModel model = (DefaultTableModel) tabla1.getModel();
            model.setRowCount(0);
            model.addRow(new Object[] {Neptuno[0], Neptuno[1], Neptuno[2], Neptuno[3], Neptuno[4], Neptuno[5], Neptuno[6], Neptuno[7]});
         
        }
        
        //Ahora lo mismo con los satelites obtenemos los datos y los insertamos en la tabla 2
        if(elegirPlaneta.getSelectedItem().equals("Tierra")){
            //luna
             conexiondeBDD conexion = new conexiondeBDD();
            String[] luna = conexion.consultaLuna();
            DefaultTableModel model = (DefaultTableModel) tabla2.getModel(); //coger tabla 2
            model.setRowCount(0); //limpiar tabla
            model.addRow(new Object[] {luna[0], luna[1], luna[2], luna[3], luna[4], luna[5], luna[6]});
             
        }else if(elegirPlaneta.getSelectedItem().equals("Marte")){
            //Deimos
            conexiondeBDD conexion = new conexiondeBDD();
            String[] Deimos = conexion.consultaDeimos();
            DefaultTableModel model = (DefaultTableModel) tabla2.getModel(); //coger tabla 2
            model.setRowCount(0); //limpiar tabla
            model.addRow(new Object[] {Deimos[0], Deimos[1], Deimos[2], Deimos[3], Deimos[4], Deimos[5], Deimos[6]});
            //Fobos
            String[] Foobos = conexion.consultaFobos();
            model.addRow(new Object[] {Foobos[0], Foobos[1], Foobos[2], Foobos[3], Foobos[4], Foobos[5], Foobos[6]});
        }else if(elegirPlaneta.getSelectedItem().equals("Jupiter")){
            //Ío
            conexiondeBDD conexion = new conexiondeBDD();
            String[] Ío = conexion.consultaÍo();
            DefaultTableModel model = (DefaultTableModel) tabla2.getModel(); //coger tabla 2
            model.setRowCount(0); //limpiar tabla
            model.addRow(new Object[] {Ío[0], Ío[1], Ío[2], Ío[3], Ío[4], Ío[5], Ío[6]});
            //Europa
            String[] Europa = conexion.consultaEuropa();
            model.addRow(new Object[] {Europa[0], Europa[1], Europa[2], Europa[3], Europa[4], Europa[5], Europa[6]});
            //Ganimedes
            String[] Ganimedes = conexion.consultaGanimedes();
            model.addRow(new Object[] {Ganimedes[0], Ganimedes[1], Ganimedes[2], Ganimedes[3], Ganimedes[4], Ganimedes[5], Ganimedes[6]});
            //Calisto
            String[] Calisto = conexion.consultaCalisto();
            model.addRow(new Object[] {Calisto[0], Calisto[1], Calisto[2], Calisto[3], Calisto[4], Calisto[5], Calisto[6]});
           
        }else if(elegirPlaneta.getSelectedItem().equals("Saturno")){
            //Titán
            conexiondeBDD conexion = new conexiondeBDD();
            String[] Titán = conexion.consultaTitán();
            DefaultTableModel model = (DefaultTableModel) tabla2.getModel(); //coger tabla 2
            model.setRowCount(0); //limpiar tabla
            model.addRow(new Object[] {Titán[0], Titán[1], Titán[2], Titán[3], Titán[4], Titán[5], Titán[6]});
            
            //Encélado
            String[] Encélado = conexion.consultaEncélado();
            model.addRow(new Object[] {Encélado[0], Encélado[1], Encélado[2], Encélado[3], Encélado[4], Encélado[5], Encélado[6]});
            
            
        }else if(elegirPlaneta.getSelectedItem().equals("Urano")){
            //Titania
            conexiondeBDD conexion = new conexiondeBDD();
            String[] Titania = conexion.consultaTitania();
            DefaultTableModel model = (DefaultTableModel) tabla2.getModel(); 
            model.setRowCount(0); //limpiar tabla
            model.addRow(new Object[] {Titania[0], Titania[1], Titania[2], Titania[3], Titania[4], Titania[5], Titania[6]});
            
            //Oberón
            String[] Oberón = conexion.consultaOberón();
            model.addRow(new Object[] {Oberón[0], Oberón[1], Oberón[2], Oberón[3], Oberón[4], Oberón[5], Oberón[6]});
        }    
        
        
        
        
    }//GEN-LAST:event_elegirPlanetaActionPerformed

    private void verActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verActionPerformed
        conexiondeBDD conexion = new conexiondeBDD();
        String[] datosEstrella = conexion.consultaEstrella();

        // Clic en  botón se pongan los datos de la estrella
        TipoE.setText(datosEstrella[0]);
        TipoRadio.setText(datosEstrella[1]);
        TipoTemperatura.setText(datosEstrella[2]);
        TipoDistancia.setText(datosEstrella[3]);
        TipoComposicion.setText(datosEstrella[4]);


    }//GEN-LAST:event_verActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(practicaIntermodular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(practicaIntermodular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(practicaIntermodular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(practicaIntermodular.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new practicaIntermodular().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Composicion;
    private javax.swing.JLabel Distancia;
    private javax.swing.JLabel Estrella;
    private javax.swing.JLabel Radio;
    private javax.swing.JLabel Temperatura;
    private javax.swing.JLabel TipoComposicion;
    private javax.swing.JLabel TipoDistancia;
    private javax.swing.JLabel TipoE;
    private javax.swing.JLabel TipoEstrella;
    private javax.swing.JLabel TipoRadio;
    private javax.swing.JLabel TipoTemperatura;
    private javax.swing.JLabel Titulo;
    private javax.swing.JComboBox<String> elegirPlaneta;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabla1;
    private javax.swing.JTable tabla2;
    private javax.swing.JButton ver;
    // End of variables declaration//GEN-END:variables
}
